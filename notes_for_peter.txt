#Compiling cxx targets with gclang++ ignores -stdlib=c++
#Experiment, we got multiple conflicts when we told the linker to add everything
#But what happens is the linker is lazy, so if we have a symbol it might not conflict!
#Okay we have something that works, lets document 
#Is equal maybe from the abi? 

#The set of all things we dont want to track is the union of taintSource and of the runtime 
#The set of things that is conflicting is whats in the cxx abi


#We have a hang! Test - add lc++abi, and lc++abipoly :thinking: 

#DEBUG NOTES - is_equal has func entry, so fix instrumentation logic for functions

#The goal: Instrument libcxx, libcxxabi, and the target cxx program so taint can propagate libcxx 

#To begin, I started with building without instrumentation
#I compiled libcxx,abi,unwind with gllvm 

./gllvm_build_libcxx.sh  

#Compile the target and point them to the libcxx and libcxx abi install 
#so that they are using our built library. 

gclang++ -pie -fPIC -stdlib=libc++ -nostdinc++ -I../track_stuff/include/c++/v1/ -L../track_stuff/lib/ -g -o testme test_simple_json.cpp -lc++ -lc++abi -lpthread

#get-bc -b ... (extract bitcode for everything) 

#The output.bc file should have cxx in it already. to test, try linking with cxx.bc

llvm-link output.bc cxx.bc -o test.bc 

#This should fail, because of already defined symbols

#Compile into executable via clang++ 
#NOTE ADDING C++ABI MEANS WE NEED TO ADD lC++ABI
clang++ -pie -fPIC -o full_target full_target.bc -lpthread 

./full_target #runs fine 

#Try with clang, because then it won't link stdc++ 
#It should work because we should rely on the libcxx already linked into full_target 

clang -pie -fPIC -o full_target full_target.bc -lpthread 

./full_target #runs fine 

#Do libcxx and stdc++ have symbol conflicts?
#They do not, because of lazy evaluation 
#You can confirm by trying to use -Wl,--whole-archive etc 

#Instrument the full_target to track_target 
./polyopt full_target.bc track_target.bc 

#Link with dfsan and taint sources 
clang++ -pie -fPIC -o full_target new_track.bc -lpthread -Wl,--whole-archive libdfsan_rt-x86_64.a -Wl,--no-whole-archive libTaintSources.a -ldl -lrt -lstdc++

 

#Does it compile? 

#Does it run and not crash? 
